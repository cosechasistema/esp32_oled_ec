#include <Arduino.h>
#include <Adafruit_NeoPixel.h>
#include <JC_Button.h>

#ifdef BOARDesp32dev
// Pin definition

#define led_Pin 2
#define pin_neopixel 15
#define led_neopixel_count 10
#define BUTTON_PIN D3
// Para genearar un build-->  platformio run -e esp32dev
// Para Pasarlo a la Placa --> platformio run -e esp32dev --target upload
// Para Limpiar todo ( build file) --> platformio run --target clean
// cableado 3.3v gnd, SDA 21 SCL 22

#endif

#ifdef BOARDwemosbat
// Pin definition

#define led_Pin 2
#define pin_neopixel 15
#define led_neopixel_count 10
#define BUTTON_PIN D3
// Para genearar un build-->  platformio run -e wemosbat
// Para Pasarlo a la Placa --> platformio run -e wemosbat --target upload
// Para Limpiar todo --> platformio run --target clean

#endif

#ifdef BOARDnodemcuv2
// Pin definition nodemcu

#define led_Pin 2
#define pin_neopixel D2
#define led_neopixel_count 19
#define BUTTON_PIN D3

// https://www.luisllamas.es/esp8266-nodemcu/

// Para genearar un build-->  platformio run -e nodemcuv2
// Para Pasarlo a la Placa --> platformio run -e nodemcuv2 --target upload
// Para Limpiar todo --> platformio run --target clean

// SDA=4 => D2
// SCL=5 => D1

#endif

// *********************************
// * Manejo del Boton
// *********************************

Button myBtn(BUTTON_PIN); // define the button

// *********************************
// * Manejo del neopixel
// *********************************
// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
Adafruit_NeoPixel strip = Adafruit_NeoPixel(led_neopixel_count, pin_neopixel, NEO_GRB + NEO_KHZ800);

int oldR[led_neopixel_count];
int oldG[led_neopixel_count];
int oldB[led_neopixel_count];

int newR[led_neopixel_count];
int newG[led_neopixel_count];
int newB[led_neopixel_count];
int nmax = 255;

//---LED FX VARS
int idex = 0;            //-LED INDEX (0 to LED_COUNT-1
int ihue = 150;          //-HUE (0-255)
int ibright = 50;        //-BRIGHTNESS (0-255)
int isat = 240;          //-SATURATION (0-255)
int bouncedirection = 0; //-SWITCH FOR COLOR BOUNCE (0-1)
float tcount = 0.0;      //-INC VAR FOR SIN LOOPS
int lcount = 0;          //-ANOTHER COUNTING VAR
int TOP_INDEX = led_neopixel_count / 2;
int BOTTOM_INDEX = 0;
int thissat = 255;
int EVENODD = led_neopixel_count % 2;
int time_plus = 0;
int sunnyBrightness = 200;

// *********************************
// * FIN  Manejo del neopixel
// *********************************

int modo_clima = 0;

boolean DemoMode = true;

//************************
//** F U N C I O N E S ***
//************************

//  para el manejo de la funciones led
void Wildfire();
void Rainbow();
void Wildfire2();
void Overcast();
void Day_Cold();
void Sunrise();
void Day_Stormy();
void Day_Sunny();
void Night_Stormy();
void Night_Clear();
void Sunset();
// manejo de los efectos de neopixel
void setAllHSV(unsigned int h, byte s, byte v);
void setHSV(int led, unsigned int hue, byte sat, byte val);
void rainbowCycle(uint8_t wait);
void random_burst();
void ems_lightsSTROBE();
void rgb_propeller();
void flame();
void one_color_RGB(char R, char G, char B);
void flicker(int thishue, int thissat);
void lightning(int length, int hue, int sat);
void ColorCycle();
void Rave();

// para selecciona el clima
void clima_seleccionado(int modo_clima);

void setup()
{
    pinMode(led_Pin, OUTPUT);
    Serial.begin(115200);

    strip.begin();
    strip.show();              // Initialize all pixels to 'off'
    randomSeed(analogRead(0)); // EXTRA RANDOMNESS!!!!!
    // Sunrise();                 // trato de prender la luces aunque no este conectado
    Serial.println("------- ARRANCO ---  ");
}

void loop()
{

    //*****************************
    //***   LUCES NUBE       ***
    //*****************************
    /*
    if (DemoMode)
    {
      long time_plus = millis();
      time_plus /= 20000;
      clima_seleccionado(time_plus % 17);
    }
    else
    { //set DemoMode false and test functions here!
      // Sunrise();
      // dejo el  clima que se selecciono por mqtt
      clima_seleccionado(modo_clima);
    }
    */

    static bool ledState;
    // Serial.println("------- VERI SI ANDA ---  ");
    myBtn.read(); // read the button
                  // necesito un delay
    // delay(500);
    if (myBtn.wasReleased()) // if the button was released, change the LED state
    {

        Serial.println("Boton Apretado ");
        ledState = !ledState;
        digitalWrite(led_Pin, ledState);
        modo_clima++;

        if (modo_clima > 11)
        {
            modo_clima = 0;
        }
        Serial.println(modo_clima);
    }

    clima_seleccionado(modo_clima);
}

void clima_seleccionado(int modo_clima)
{
    switch (modo_clima)
    {
    case 0:
        Sunrise();
        break;
    case 1:
        Overcast();
        break;
    case 2:
        Day_Cold();
        break;
    case 3:
        Day_Stormy();
        break;
    case 4:
        Wildfire();
        break;
    case 5:
        Wildfire2();
        break;
    case 6:
        Day_Sunny();
        break;
    case 7:
        Sunset();
        break;
    case 8:
        Night_Clear();
        break;
    case 9:
        Night_Stormy();
        break;
    case 10:
        Day_Stormy(); // ems_lightsSTROBE();
        break;
    case 11:
        Rave();
        break;
    default:
        Day_Stormy();
    }
}
//***************************************
//** EFECTOS FUNCIONES NEOPIXEL  ***
//***************************************

void lightning(int length, int hue, int sat)
{ // 200,240,128 is nice and blueish
    for (int i = 0; i < length; i++)
    {
        flicker(hue, sat);
        strip.show();
    }
}

//============================EFFECTS===========================================================

void flicker(int thishue, int thissat)
{ //-m9-FLICKER EFFECT
    int random_bright = random(0, 255);
    int random_delay = random(10, 100);
    int random_bool = random(random_bright);
    if (random_bool < 10)
    {
        delay(random_delay);
        for (int i = 0; i < led_neopixel_count; i++)
        {
            setHSV(i, thishue, thissat, random_bright);
        }
    }
}

void one_color_RGB(char R, char G, char B)
{ // set all to one RGB
    for (int i = 0; i < led_neopixel_count; i++)
    {
        strip.setPixelColor(i, R, G, B);
    }
    strip.show();
}

void rgb_propeller()
{ //-m27-RGB PROPELLER
    idex++;
    int thishue = 80;
    int thisdelay = 100;
    int ghue = (thishue + 80) % 255;
    int bhue = (thishue + 160) % 255;
    int N3 = int(led_neopixel_count / 3);
    // int N6 = int(led_neopixel_count / 6);
    int N12 = int(led_neopixel_count / 12);
    for (int i = 0; i < N3; i++)
    {
        int j0 = (idex + i + led_neopixel_count - N12) % led_neopixel_count;
        int j1 = (j0 + N3) % led_neopixel_count;
        int j2 = (j1 + N3) % led_neopixel_count;
        // leds[j0] = CHSV(thishue, thissat, 255);
        setHSV(j0, thishue, thissat, 255);
        // leds[j1] = CHSV(ghue, thissat, 255);
        setHSV(j1, ghue, thissat, 255);
        // leds[j2] = CHSV(bhue, thissat, 255);
        setHSV(j2, bhue, thissat, 255);
    }
    strip.show();
    delay(thisdelay);
}

void ems_lightsSTROBE()
{ //-m26-EMERGENCY LIGHTS (STROBE LEFT/RIGHT)
    int thishue = 0;
    int thathue = (thishue + 160) % 255;
    int thisdelay = 100;
    for (int x = 0; x < 5; x++)
    {
        for (int i = 0; i < TOP_INDEX; i++)
        {
            // leds[i] = CHSV(thishue, thissat, 255);
            setHSV(i, thishue, thissat, 255);
        }
        strip.show();
        delay(thisdelay);
        one_color_RGB(0, 0, 0);
        strip.show();
        delay(thisdelay);
    }
    for (int x = 0; x < 5; x++)
    {
        for (int i = TOP_INDEX; i < led_neopixel_count; i++)
        {
            // leds[i] = CHSV(thathue, thissat, 255);
            setHSV(i, thathue, thissat, 255);
        }
        strip.show();
        delay(thisdelay);
        one_color_RGB(0, 0, 0);
        strip.show();
        delay(thisdelay);
    }
}

void random_burst()
{ //-m4-RANDOM INDEX/COLOR
    int idex = random(0, led_neopixel_count);
    int ihue = random(0, 255);
    // leds[idex] = CHSV(ihue, thissat, 255);
    setHSV(idex, ihue, 200, 50);
    strip.show();
    delay(100);
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos)
{ // wheel
    if (WheelPos < 85)
    {
        return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
    }
    else if (WheelPos < 170)
    {
        WheelPos -= 85;
        return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
    }
    else
    {
        WheelPos -= 170;
        return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
    }
}

void rainbowCycle(uint8_t wait)
{ // Rainbow
    uint16_t i, j;

    for (j = 0; j < 256 * 10; j++)
    { // 10 cycles of all colors on wheel
        for (i = 0; i < strip.numPixels(); i++)
        {
            strip.setPixelColor(i, Wheel(((i * 256 / strip.numPixels()) + j) & 255));
        }
        strip.show();
        delay(wait);
    }
}

//============================================Helpers===============================================

word wordMap(word x, word in_min, word in_max, word out_min, word out_max) // word is an unsigned int. Is this faster than longs? maybe
{
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void setHSV(int led, unsigned int hue, byte sat, byte val) // Set led by hue, saturation, value
{
    unsigned char r, g, b;
    unsigned int H_accent = hue / 60;
    unsigned int bottom = ((255 - sat) * val) >> 8;
    unsigned int top = val;
    unsigned char rising = ((top - bottom) * (hue % 60)) / 60 + bottom;
    unsigned char falling = ((top - bottom) * (60 - hue % 60)) / 60 + bottom;

    switch (H_accent)
    {
    case 0:
        r = top;
        g = rising;
        b = bottom;
        break;

    case 1:
        r = falling;
        g = top;
        b = bottom;
        break;

    case 2:
        r = bottom;
        g = top;
        b = rising;
        break;

    case 3:
        r = bottom;
        g = falling;
        b = top;
        break;

    case 4:
        r = rising;
        g = bottom;
        b = top;
        break;

    case 5:
        r = top;
        g = bottom;
        b = falling;
        break;
    }
    strip.setPixelColor(led, r, g, b);
}

void setAllHSV(unsigned int h, byte s, byte v) // Set all leds to one HSV
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        setHSV(i, h, s, v);
    }
}

//---FIND ADJACENT INDEX CLOCKWISE
int adjacent_cw(int i)
{
    int r;
    if (i < led_neopixel_count - 1)
    {
        r = i + 1;
    }
    else
    {
        r = 0;
    }
    return r;
}

//---FIND ADJACENT INDEX COUNTER-CLOCKWISE
int adjacent_ccw(int i)
{
    int r;
    if (i > 0)
    {
        r = i - 1;
    }
    else
    {
        r = led_neopixel_count - 1;
    }
    return r;
}

//---FIND INDEX OF HORIZONAL OPPOSITE LED
int horizontal_index(int i)
{
    //-ONLY WORKS WITH INDEX < TOPINDEX
    if (i == BOTTOM_INDEX)
    {
        return BOTTOM_INDEX;
    }
    if (i == TOP_INDEX && EVENODD == 1)
    {
        return TOP_INDEX + 1;
    }
    if (i == TOP_INDEX && EVENODD == 0)
    {
        return TOP_INDEX;
    }
    return led_neopixel_count - i;
}

//***************************************
//** FIN EFECTOS FUNCIONES NEOPIXEL  ***
//***************************************

//**********************************
//** F U N C I O N E S NEOPIXEL  ***
//**********************************

// FUNCIONES PARA LOS LED
//============================================================

int star1Loc = 5;
int star2Loc = 17;
int moonLoc = 2;

void Sunset()
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        newR[i] = random(100, 256); // redish
        newG[i] = random(120);
        newB[i] = random(100);
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR, thisG, thisB);
        }
        strip.show();
        // delay(10);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================

void Night_Clear()
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        newR[i] = random(0, 50); // redish
        newG[i] = random(10, 30);
        newB[i] = random(50, 100);
    }
    int star1 = random(50, 255);
    int star2 = random(50, 255);
    newR[star1Loc] = star1;
    newG[star1Loc] = star1;
    newB[star1Loc] = star1;
    newR[star2Loc] = star2;
    newG[star2Loc] = star2;
    newB[star2Loc] = star2;
    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR / 2, thisG / 2, thisB / 2);
        }
        // moon
        setHSV(moonLoc, 75, 220, 255); // make pixel 2 a yellow moon
        strip.show();
        // delay(10);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================
byte StormR[] = {85, 0, 125, 0, 128, 15, 128, 0, 0, 0};
byte StormG[] = {145, 0, 137, 100, 66, 36, 230, 0, 0, 0};
byte StormB[] = {122, 0, 141, 130, 255, 44, 255, 0, 0, 0};

void Night_Stormy()
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        int matrixPos = random(11);
        newR[i] = StormR[matrixPos];
        newG[i] = StormG[matrixPos];
        newB[i] = StormB[matrixPos];
    }

    // Set a few pixels to twinkle
    int star1 = random(50, 255);
    int star2 = random(50, 255);
    newR[star1Loc] = star1;
    newG[star1Loc] = star1;
    newB[star1Loc] = star1;
    newR[star2Loc] = star2;
    newG[star2Loc] = star2;
    newB[star2Loc] = star2;

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR / 8, thisG / 8, thisB / 8); // half the brightness
        }
        // moon
        setHSV(moonLoc, 75, 220, 255); // make pixel 2 a yellow moon
        strip.show();
        // delay(10);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
    int lightningMaybe = random(255);
    if (lightningMaybe > 245)
    {
        lightning(random(20, 150), 260, 150); // random length, hue, saturation
        one_color_RGB(0, 0, 0);
        for (int i = 0; i < led_neopixel_count; i++)
        {
            oldR[i] = 0;
            oldG[i] = 0;
            oldB[i] = 0;
        }
    }
}
//============================================================
byte SunR[] = {255, 230, 255, 230, 255, 210, 255, 0, 50};
byte SunG[] = {255, 255, 255, 255, 255, 220, 255, 0, 50};
byte SunB[] = {255, 255, 255, 255, 255, 220, 255, 0, 50};

void Day_Sunny()
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        int matrixPos = random(10);
        newR[i] = SunR[matrixPos];
        newG[i] = SunG[matrixPos];
        newB[i] = SunB[matrixPos];
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR, thisG, thisB);
        }
        strip.show();
        // delay(20);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================

void Day_Stormy()
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        int matrixPos = random(10);
        newR[i] = StormR[matrixPos] * .8;
        newG[i] = StormG[matrixPos] * .8;
        newB[i] = StormB[matrixPos] * .8;
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR / 4, thisG / 4, thisB / 4); // 1/4 the brightness
        }
        strip.show();
        // delay(10);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
    int lightningMaybe = random(255);
    if (lightningMaybe > 230)
    {
        lightning(random(20, 150), 240, 128); // random length, hue, saturation
        one_color_RGB(0, 0, 0);
        for (int i = 0; i < led_neopixel_count; i++)
        {
            oldR[i] = 0;
            oldG[i] = 0;
            oldB[i] = 0;
        }
    }
}
//============================================================

void Sunrise()
{
    // Sunrise Pallete
    byte SunriseR[] = {16, 255, 255, 255, 255, 255, 255};
    byte SunriseG[] = {160, 110, 120, 20, 110, 235, 138};
    byte SunriseB[] = {255, 0, 20, 40, 9, 91, 49};

    for (int i = 0; i < led_neopixel_count; i++)
    {
        int matrixPos = random(8);
        newR[i] = SunriseR[matrixPos];
        newG[i] = SunriseG[matrixPos];
        newB[i] = SunriseB[matrixPos];
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR, thisG, thisB);
        }
        strip.show();
        delay(5);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================
void Day_Cold()
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        int brightness = random(20, 255);
        newR[i] = brightness - 20;
        newG[i] = brightness;
        newB[i] = 255; // nice and blue
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR, thisG, thisB);
        }
        strip.show();
        delay(5);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================

void Overcast()
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        int shade = random(0, 204);
        newR[i] = shade;
        newG[i] = shade;
        newB[i] = shade * 1.2; // slight blue tint to overcast
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR, thisG, thisB);
        }
        strip.show();
        delay(1);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================
// Wildfire Pallete
byte WildR[] = {255, 170, 58, 242, 0, 197};
byte WildG[] = {72, 30, 24, 175, 0, 38};
byte WildB[] = {31, 15, 23, 84, 0, 16};

void Wildfire()
{

    for (int i = 0; i < led_neopixel_count; i++)
    {
        int matrixPos = random(6);
        newR[i] = WildR[matrixPos];
        newG[i] = WildG[matrixPos];
        newB[i] = WildB[matrixPos];
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR, thisG, thisB);
        }
        strip.show();
        delay(10);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================

void Rainbow()
{
    for (int i = 0; i < led_neopixel_count; i++)
    {
        newR[i] = random(90, 256); // redish
        newG[i] = random(90, 256);
        newB[i] = random(90, 256);
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR, thisG, thisB);
        }
        strip.show();
        // delay(10);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================
// Wildfire2 Pallete
byte WildR2[] = {26, 50, 108, 5, 245, 47};
byte WildG2[] = {84, 155, 182, 40, 167, 47};
byte WildB2[] = {158, 159, 253, 122, 119, 107};

void Wildfire2()
{

    for (int i = 0; i < led_neopixel_count; i++)
    {
        int matrixPos = random(6);
        newR[i] = WildR[matrixPos];
        newG[i] = WildG[matrixPos];
        newB[i] = WildB[matrixPos];
    }

    for (int n = 0; n < 256; n++)
    { // update over time
        for (int i = 0; i < led_neopixel_count; i++)
        { // update each pixel
            int thisR = map(n, 0, nmax, oldR[i], newR[i]);
            int thisG = map(n, 0, nmax, oldG[i], newG[i]);
            int thisB = map(n, 0, nmax, oldB[i], newB[i]);
            strip.setPixelColor(i, thisR, thisG, thisB);
        }
        strip.show();
        // delay(10);
    }

    for (int i = 0; i < led_neopixel_count; i++)
    {
        oldR[i] = newR[i];
        oldG[i] = newG[i];
        oldB[i] = newB[i];
    }
}
//============================================================
void ColorCycle()
{
    for (int i = 0; i < 361; i++)
    {
        setAllHSV(i, 255, 255);
        delay(40);
        strip.show();
    }
}

void Rave()
{
    for (int i = 0; i < 90; i++)
    {
        setAllHSV(4 * i, 255, 255);
        strip.show();
    }
}

//**********************************
//** FIN  F U N C I O N E S NEOPIXEL  ***
//**********************************
